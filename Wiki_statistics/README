  Описание:

  Функция, которая собирает статистику по нескольким страницам из wikipedia.
  
  В примере находится папка wiki, в ней лежит около 500 страниц из английской Википедии. Например, страница 
https://en.wikipedia.org/wiki/Stone_Age лежит в wiki/Stone_Age.

  В функцию parse будет передан путь (path) до папки wiki, и имена двух статей (start, end), например: Stone_Age и 
 Python_(programming_language). Гарантируется, что файлы обеих статей есть в папке wiki и из первой статьи можно попасть 
 в последнюю, переходя по ссылкам только на те статьи, копии которых есть в папке wiki. В примере, в статье Stone_Age 
 есть ссылка на Brain, в ней на Artificial_intelligence, а в ней на Python_(programming_language) и это кратчайший путь от 
 Stone_Age до Python_(programming_language). Задача — найти самый короткий путь (гарантируется, что существует только
 один путь минимальной длины), а затем пройтись Beautiful Soup по всем статьям в пути, для каждой найти тело статьи, это
 <div id="bodyContent">, и внутри него подсчитать:

    Количество картинок (img) с шириной (width) не меньше 200. Например: <img width="200">, но не <img> и не 
    <img width="199">;
    
    Количество заголовков (h1, h2, h3, h4, h5, h6), первая буква текста внутри которых соответствует заглавной букве E, T 
    или C. Например: <h1>End</h1> или <h5><span>Contents</span></h5>, но не <h1>About</h1> и не <h2>end</h2> и не
    <h3><span>1</span><span>End</span></h3>;
    
    Длину максимальной последовательности ссылок, между которыми нет других тегов, открывающихся или закрывающихся. 
    Например: <p><span><a></a></span>, <a></a>, <a></a></p> - тут 2 ссылки подряд, т.к. закрывающийся span прерывает 
    последовательность. <p><a><span></span></a>, <a></a>, <a></a></p> - а тут 3 ссылки подяд, т.к. span находится внутри 
    ссылки, а не между ссылками;
    
    Количество списков (ul, ol), не вложенных в другие списки. Например: <ol><li></li></ol>, <ul><li><ol><li></li></ol>
    </li></ul> - два не вложенных списка (и один вложенный).

  Результат возвращается в виде словаря, ключами которого являются имена статей, а значениями списки из четырех чисел, 
 посчитанных по формулам выше (порядок статей значения не имеет). Для нашего примера правильный результат будет :

return {
    'Stone_Age': [13, 10, 12, 40],
    'Brain': [19, 5, 25, 11],
    'Artificial_intelligence': [8, 19, 13, 198],
    'Python_(programming_language)': [2, 5, 17, 41]
}
